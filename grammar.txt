file_input → (NEWLINE | stmt)*
stmt → simple_stmt | compound_stmt

simple_stmt → small_stmt (';' small_stmt)* [';'] NEWLINE
small_stmt → decl_stmt | expr_stmt | pass_stmt | flow_stmt
decl_stmt → NAME NAME '=' expr
expr_stmt → [expr '='] expr
pass_stmt → 'pass'
flow_stmt → return_stmt
return_stmt → 'return' [expr]

expr → and_test ('or' and_test)*
and_test → not_test ('and' not_test)*
not_test → 'not' not_test | comparison
comparison → arith_expr (comp_op arith_expr)*
comp_op → '<' | '>' | '==' | '<=' | '>=' | '!='
arith_expr → term (('+' | '-') term)*
term → factor (('*', '/', '%') factor)*
factor → ('+', '-') factor | power
power → atom_expr ['**' factor]
atom_expr → atom trailer*
atom → '(' expr ')' | NAME | NUMBER | 'True' | 'False'
trailer → '(' [arglist] ')' | '.' NAME
arglist → argument (',' argument)* [',']
argument → expr

compound_stmt → if_stmt | while_stmt | funcdef | classdef
if_stmt → 'if' expr ':' suite ['else' ':' suite]
while_stmt → 'while' expr ':' suite
funcdef → 'def' NAME parameters ['→' NAME] ':' suite
classdef → 'class' NAME ['(' NAME ')'] ':' class_suite
parameters → '(' [typedarglist] ')'
typedarglist → typedarg (',' typedarg)* [',']
typedarg → NAME ':' NAME
suite → simple_stmt | NEWLINE INDENT stmt+ DEDENT
class_suite → NEWLINE INDENT class_stmt+ DEDENT
class_stmt → access_modifier (funcdef | decl_stmt NEWLINE)
access_modifier → 'private' | 'public'
